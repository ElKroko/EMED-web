---
export interface NavLink {
  label: string;
  href: string;
}

export interface Props {
  links?: NavLink[];
  logoSrc?: string;
}

const { 
  links = [
    { label: 'HOME', href: '/' },
    { label: 'ADMISIÓN', href: '/admision' },
    { label: 'PROGRAMAS', href: '/programas' },
    { label: 'MEDIACIÓN', href: '/mediacion' },
    { label: 'NOSOTROS', href: '/nosotros' },
    { label: 'CONTACTO', href: '/contacto' }
  ],
  logoSrc = '/src/assets/footer/emed_logo.svg'
} = Astro.props;
---

<header class="site-header fixed top-0 left-0 right-0 z-50 bg-celeste shadow-md transition-all duration-300">
  <div class="container mx-auto">
    <nav class="flex items-center justify-between py-4">
      
      <!-- Logo -->
      <a href="/" class="logo-link flex items-center">
        <img 
          src={logoSrc} 
          alt="EMED Logo" 
          class="h-12 w-auto"
        />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-8">
        {links.map((link) => (
          <a 
            href={link.href}
            class="nav-link font-bold tracking-wide hover:opacity-80 transition-all duration-200 relative drop-shadow-sm"
            style="color: var(--color-white);"
          >
            {link.label}
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button -->
      <button 
        class="mobile-menu-button lg:hidden flex items-center justify-center w-10 h-10 text-white hover:text-gray-200 transition-colors duration-200"
        aria-label="Abrir menú de navegación"
        aria-expanded="false"
      >
        <svg class="hamburger-icon w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg class="close-icon w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

    </nav>

    <!-- Mobile Navigation Menu -->
    <div class="mobile-menu lg:hidden hidden">
      <div class="py-4 space-y-2 border-t border-white border-opacity-20">
        {links.map((link) => (
          <a 
            href={link.href}
            class="block px-4 py-3 font-bold text-base tracking-wide hover:bg-white hover:bg-opacity-10 transition-colors duration-200 rounded-md drop-shadow-sm"
            style="color: var(--color-white);"
          >
            {link.label}
          </a>
        ))}
      </div>
    </div>

  </div>
</header>

<script>
  class SiteHeader {
    constructor() {
      this.header = document.querySelector('.site-header');
      this.mobileMenuButton = document.querySelector('.mobile-menu-button');
      this.mobileMenu = document.querySelector('.mobile-menu');
      this.hamburgerIcon = document.querySelector('.hamburger-icon');
      this.closeIcon = document.querySelector('.close-icon');
      this.isMenuOpen = false;
      
      this.init();
    }

    init() {
      // Mobile menu toggle
      this.mobileMenuButton?.addEventListener('click', () => this.toggleMobileMenu());
      
      // Close mobile menu when clicking on links
      const mobileLinks = document.querySelectorAll('.mobile-menu a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => this.closeMobileMenu());
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        if (this.isMenuOpen && !this.header?.contains(e.target as Node)) {
          this.closeMobileMenu();
        }
      });

      // Handle scroll for sticky header effect
      window.addEventListener('scroll', () => this.handleScroll());
      
      // Handle resize to close mobile menu
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024 && this.isMenuOpen) {
          this.closeMobileMenu();
        }
      });
    }

    toggleMobileMenu() {
      if (this.isMenuOpen) {
        this.closeMobileMenu();
      } else {
        this.openMobileMenu();
      }
    }

    openMobileMenu() {
      this.isMenuOpen = true;
      this.mobileMenu?.classList.remove('hidden');
      this.hamburgerIcon?.classList.add('hidden');
      this.closeIcon?.classList.remove('hidden');
      this.mobileMenuButton?.setAttribute('aria-expanded', 'true');
      document.body.style.overflow = 'hidden';
    }

    closeMobileMenu() {
      this.isMenuOpen = false;
      this.mobileMenu?.classList.add('hidden');
      this.hamburgerIcon?.classList.remove('hidden');
      this.closeIcon?.classList.add('hidden');
      this.mobileMenuButton?.setAttribute('aria-expanded', 'false');
      document.body.style.overflow = '';
    }

    handleScroll() {
      const scrollY = window.scrollY;
      
      if (scrollY > 100) {
        this.header?.classList.add('header-scrolled');
      } else {
        this.header?.classList.remove('header-scrolled');
      }
    }
  }

  // Initialize header when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SiteHeader();
  });
</script>

<style>
  .site-header {
    backdrop-filter: blur(8px);
    background-color: var(--color-celeste);
  }

  .site-header.header-scrolled {
    background-color: rgba(126, 197, 214, 0.95);
    box-shadow: var(--shadow-lg);
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--color-white);
    transition: width var(--transition-fast);
  }

  .nav-link:hover::after {
    width: 100%;
  }

  .mobile-menu {
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Ensure header doesn't cover content */
  body {
    padding-top: 80px;
  }

  @media (max-width: 1023px) {
    body {
      padding-top: 72px;
    }
  }
</style>