---
export interface Props {
  color?: string;
  className?: string;
  position?: 'absolute' | 'relative';
  zIndex?: number;
}

const { 
  color = "#6ABDCC",
  className = "",
  position = "absolute",
  zIndex = -1
} = Astro.props;
---

<div 
  class={`hero-svg ${className}`}
  style={`position: ${position}; z-index: ${zIndex};`}
>
  <svg 
    width="100%" 
    height="100%" 
    viewBox="0 0 1279 766" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    preserveAspectRatio="xMidYMid slice"
  >
    <path 
      d="M452 0C318 -0.000256064 334 0.000210975 166 0.000274991C90.43 3.01217 49.9102 0.000427132 0 0.000382043V691.102C190.09 679.148 478.93 574.9 639 625.752C886.89 704.505 921.43 672.016 1110.76 664.474C1171.07 662.07 1224 771.069 1279 765.816L1280 0.00028501C1072.5 0.00028501 568.5 0 452 0Z" 
      fill={color}
    />
  </svg>
</div>

<style>
  .hero-svg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
  }
  
  /* Ensure SVG covers the header area when used in hero */
  .hero-svg.hero-svg-bg {
    top: -80px;
    height: calc(100% + 80px);
  }
  
  @media (max-width: 1023px) {
    .hero-svg.hero-svg-bg {
      top: -72px;
      height: calc(100% + 72px);
    }
  }
  
  .hero-svg svg {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero-svg svg {
      transform: scale(1.1);
      transform-origin: center;
    }
  }
  
  @media (max-width: 480px) {
    .hero-svg svg {
      transform: scale(1.2);
    }
  }
</style>